akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  log-config-on-start = off

  http.host-connection-pool {
    # The maximum number of parallel connections that a connection pool to a
    # single host endpoint is allowed to establish. Must be greater than zero.
    max-connections = 2048
    # The maximum number of open requests accepted into the pool across all
    # materializations of any of its client flows.
    # Protects against (accidentally) overloading a single pool with too many client flow materializations.
    # Note that with N concurrent materializations the max number of open request in the pool
    # will never exceed N * max-connections * pipelining-limit.
    # Must be a power of 2 and > 0!
    max-open-requests = 8192

    idle-timeout = 30s
  }

  http {
    server {
      max-connections = 1024
      backlog = 2000

      // Akka HTTP default value
      idle-timeout = 60 s

      // TODO: Might be a problem for some services used by the client (director, treehub?)
      // turn off automatic HEAD->GET conversion, otherwise `head` routes get ignored
      transparent-head-requests = false
    }
  }
}


ats {
  metricsReporter {
    reportMetrics = true
  }

  database {
    migrate = true
    asyncMigrations = true
    skipMigrationCheck = true

    // TODO: Needs to be scoped to service?
    encryption {
      salt = ""
      password = ""
    }
  }

  auth {
    protocol = "oauth.accesstoken" # or none
    verification = "local" # three options: none, local, auth-plus
    token {
      secret = "AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow"
    }
  }

  authplus {
    api.host = "localhost"
    api.port = 9001
    api.scheme = "http"
    api.uri = ${ats.authplus.api.scheme}"://"${ats.authplus.api.host}":"${ats.authplus.api.port}
    client{
      id = ""
      secret = ""
    }
  }

  reposerver {
    http {
      server = {
        host = "0.0.0.0"
        port = 7000

        # add some extra bytes for headers
        sizeLimit = 536872000 // > 512Mb
        uploadRequestTimeout = ${akka.http.server.request-timeout}
      }

      client {
        keyserver {
          host = "localhost"
          port = 7200
          uri = "http://"${ats.reposerver.http.client.keyserver.host}":"${ats.reposerver.http.client.keyserver.port}
        }
      }
    }

    // TODO: libats needs to get it from here
    database {
      driver = "org.mariadb.jdbc.Driver"
      url = "jdbc:mariadb://127.0.0.1:3306/tuf_repo"
      properties {
        user = "tuf_repo"
        password = "tuf_repo"
        sessionVariables = "net_write_timeout=10000"
      }
      numThreads = 20
      queueSize = 1000
      registerMbeans = true
      flyway.locations = [ "db/migration/reposerver" ]
    }

    storage {
      type = "s3"
      localStorageRoot = "/tmp/tuf-reposerver-targets"
      outOfBandUploadLimit = "3GB"

      s3 {
        accessKey = ${?TUF_REPOSERVER_AWS_ACCESS_KEY}
        secretKey = ${?TUF_REPOSERVER_AWS_SECRET_KEY}
        bucketId = ${?TUF_REPOSERVER_AWS_BUCKET_ID}
        region = "eu-central-1"
        region = ${?TUF_REPOSERVER_AWS_REGION}
      }

      azure {
        // Connection string to connect to blob storage service
        connectionString = ${?AZURE_CONNECTION_STRING}
        signatureTtl = 30m
        signatureTtl = ${?AZURE_SIGNATURE_TTL}
      }
    }
  }

  keyserver {
    http.server {
      host = "0.0.0.0"
      port = 7200
    }

    database = {
      driver = "org.mariadb.jdbc.Driver"
      url = "jdbc:mariadb://localhost:3306/tuf_keyserver"
      properties {
        user = "tuf_keyserver"
        password = "tuf_keyserver"
        sessionVariables = "net_write_timeout=10000"
      }
      numThreads = 20
      queueSize = 1000
      registerMbeans = true
      flyway.locations = [ "db/migration/keyserver" ]
    }
  }

  director {
    allowEcuReplacement = false
    requestLogLevel = "info"

    http = {
      server = {
        host = "0.0.0.0"
        port = 7300
      }

      client = {
        keyserver {
          host = "localhost"
          port = 7200
          uri = "http://"${ats.director.http.client.keyserver.host}":"${ats.director.http.client.keyserver.port}
        }
      }
    }

    database = {
      driver = "org.mariadb.jdbc.Driver"
      url = "jdbc:mariadb://localhost:3306/director_v2"
      properties {
        user = "director_v2"
        password = "director_v2"
        rewriteBatchedStatements=true
      }
      numThreads = 20
      queueSize = 1000
      registerMbeans = true
      flyway.locations = [ "db/migration/director" ]
    }
  }
}
